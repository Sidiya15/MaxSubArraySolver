I = c(0); J = c(0); C =c()
max_subarray(c(1, -2, 3))
if(length(A) == 1 & is.na(A[1]) == TRUE)
max_subarray<- function(A){
# a pointer that will look over the array and evaluate
#the accumulated sum at each iteration
currentSum = 0
# a variable that will help us to store the max of currentSum at each step
maxSum = 0
# a way to keep truck on the start and the end indices of the                                         subarray we are looking for
# we initialize I and J with 0 to avoid -Inf returned by the max  if
# one of them is empty
I = c(0); J = c(0); C =c()
if(length(A) == 1 & is.na(A[1]) == TRUE)
stop("Not callable for an empty array") # we raise an exception
if(length(A) == 1)
return(list(MaxSum= A,indx_start = 1, indx_end = 1))
else {
for(i in 1:length(A)) {
currentSum = currentSum + A[i]
if(currentSum <= 0) {
currentSum = 0
J = c(J, i)}
if(currentSum >0 & maxSum >= currentSum)
C = c(C, i)
if(maxSum < currentSum) {
maxSum = currentSum
I = c(I, i)
}
}
indx_end = max(I)
indx_start = min(min(C[C>max(J[J<indx_end])]), min(I[I>max(J[J<indx_end])]))
return(list(MaxSum=maxSum, indx_start = indx_start, indx_end = indx_end))
}
}
max_subarray<- function(A){
# a pointer that will look over the array and evaluate
#the accumulated sum at each iteration
currentSum = 0
# a variable that will help us to store the max of currentSum at each step
maxSum = 0
# a way to keep truck on the start and the end indices of the                                         subarray we are looking for
# we initialize I and J with 0 to avoid -Inf returned by the max  if
# one of them is empty
I = c(0); J = c(0); C =c()
if(length(A) == 1 & is.na(A[1]) == TRUE)
stop("Not callable for an empty array") # we raise an exception
if(length(A) == 1)
return(list(MaxSum= A,indx_start = 1, indx_end = 1))
else {
for(i in 1:length(A)) {
currentSum = currentSum + A[i]
if(currentSum <= 0) {
currentSum = 0
J = c(J, i)}
if(currentSum >0 & maxSum >= currentSum)
C = c(C, i)
if(maxSum < currentSum) {
maxSum = currentSum
I = c(I, i)
}
}
indx_end = max(I)
indx_start = min(min(C[C>max(J[J<indx_end])]), min(I[I>max(J[J<indx_end])]))
return(list(MaxSum=maxSum, indx_start = indx_start, indx_end = indx_end))
}
}
max_subarray(c(1, 3, -1, 5))
